const axios = require('axios');

exports.main = async (event, callback) => {
    const hubspot = axios.create({
        baseURL: 'https://api.hubapi.com',
        headers: { 'Authorization': `Bearer ${process.env.hubspot_oauth}` }
    });

    let outputFields = {};

    try {
        // Get dealId directly from the event object
        const dealId = event.inputFields.dealId;
        console.log("Deal ID from inputFields.dealId:", dealId);

        // Step 1: Get associated Line Items
        const lineItemsResponse = await hubspot.get(`/crm/v3/objects/deals/${dealId}/associations/line_items`);
        const lineItemIds = lineItemsResponse.data.results.map(item => item.id);
        console.log("Line Item IDs associated with Deal:", lineItemIds);

        if (lineItemIds.length > 0) {
            // Step 2: Retrieve details for each Line Item
            const lineItemDetails = await Promise.all(lineItemIds.map(async (id) => {
                try {
                    // **Modified Line Item GET request to include properties parameter:**
                    const response = await hubspot.get(`/crm/v3/objects/line_items/${id}?properties=name,hs_sku,amount,quantity,hs_total_discount,hs_discount_percentage,hs_product_id`);
                    console.log(`Line Item API Response for ID ${id}:`, response);
                    const data = response.data.properties;
                    console.log('Line Item Data (properties):', data);

                    // Initialize values from the line item
                    let productName = data.name || 'Unknown Item';
                    let productSku = data.hs_sku || 'N/A';
                    let productAmount = data.amount || '0';
                    let totalDiscount = data.hs_total_discount || '0';
                    let discountPercentage = data.hs_discount_percentage || '0';

                    // Step 3: If data is missing from the line item, attempt to fetch from associated product
                    if (productSku === 'N/A' || productAmount === '0') {
                        if (data.hs_product_id) {
                            try {
                                const productResponse = await hubspot.get(`/crm/v3/objects/products/${data.hs_product_id}`);
                                const productData = productResponse.data.properties;
                                console.log(`Product Data (properties) for Product ID ${data.hs_product_id}:`, productData);

                                // Update values from the product if missing on the line item
                                if (!productName || productName === 'Unknown Item') {
                                    productName = productData.name || 'Unknown Item';
                                }
                                if (productSku === 'N/A') {
                                    productSku = productData.hs_sku || 'N/A';
                                }
                                if (productAmount === '0') {
                                    productAmount = productData.amount || '0';
                                }
                            } catch (productError) {
                                console.error('Error fetching product details:', productError.message);
                            }
                        }
                    }

                    // Return the formatted string for this line item
                    return {
                        productName: productName,
                        productSku: productSku,
                        quantity: data.quantity || '0',
                        productAmount: productAmount,
                        totalDiscount: totalDiscount,
                        discountPercentage: discountPercentage
                    };

                } catch (lineItemFetchError) {
                    console.error(`Error fetching Line Item ID ${id}:`, lineItemFetchError.message);
                    return {
                        productName: 'Error Fetching Item',
                        productSku: 'Error',
                        quantity: '0',
                        productAmount: '0',
                        totalDiscount: '0',
                        discountPercentage: '0'
                    };
                }
            }));

            // Step 4: Output each line item to a different output field
            lineItemDetails.forEach((item, index) => {
                outputFields[`lineItem${index + 1}`] = `${item.productName} (SKU: ${item.productSku}, Qty: ${item.quantity}, Amount: $${item.productAmount}, Discount: $${item.totalDiscount}, Discount Percentage: ${item.discountPercentage}%)`;
            });
        } else {
            console.log("No Line Items associated with Deal ID:", dealId);
        }

    } catch (error) {
        console.error('Error:', error.response?.data || error.message);
        outputFields.error = `Error: ${error.message}`;
    }

    // Step 5: Return Output Using Callback
    callback({
        outputFields: outputFields
    });
};